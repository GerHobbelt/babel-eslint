// Reimplementaion of LightScript's implicit returns algorithm
import { api } from '@lightscript/babel-preset'
{ isa, getTails } = api

// Emulate babel's path API to the extent the lsc getTails needs it
class CheapPath:
  constructor(node) ->
    this.node = node
    this.type = node.type

  static makeFromParentKey(parentNode, parentPath, parentKey, parentIndex, node): CheapPath ->
    p = new CheapPath(node)
    p.parent = parentNode
    p.parentPath = parentPath
    p.parentKey = parentKey
    if parentIndex~looseNotEq(null): p.parentIndex = parentIndex
    p

  get(k) ->
    v = this.node[k]
    if not v:
      null
    elif Array.isArray(v):
      [...for idx i, elem e in v:
        [CheapPath.makeFromParentKey(this.node, this, k, i, e)]
      ]
    elif (typeof v == 'object') and v.type:
      CheapPath.makeFromParentKey(this.node, this, k, null, v)
    else:
      v

// Check if a tail is an expression or convertible to an expression
isTailExpression(node) ->
  match node:
    | ~isa("ExpressionStatement"), ~isa("FunctionDeclaration"), ~isa("ClassDeclaration"): true
    | ~isa("VariableDeclaration"):
      node.declarations.length == 1
    | else: false

export getTailExpressions(baseNode) ->
  basePath = new CheapPath(baseNode)
  tails = match baseNode:
    | ~isa("Function"):
      getTails(basePath.get('body'), false)
    | ~isa("LscIfExpression"):
      getTails(basePath.get('consequent'), false)
        .concat(getTails(basePath.get('alternate'), false))
    | ~isa("LscMatchExpression"):
      [...for elem c in basePath.get('cases'): getTails(c.get('consequent'))]
    | ~isa("LscSpreadLoop"):
      getTails(basePath.get('loop').get('body'), true)
    | else: []

  [...for elem t in tails: if t.node~isTailExpression!: [t.node]]
