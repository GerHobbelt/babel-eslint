import { api } from '@lightscript/babel-preset'
import analyze from './analyze-scope'
import childVisitorKeys from './visitor-keys'

import { Reference, ScopeManager } from 'eslint-scope'
Definition = require("eslint-scope/lib/definition").Definition
GlobalScope = require("eslint-scope/lib/scope").GlobalScope
fallback = require("eslint-visitor-keys").getKeys

{ tooling } = api
{ isPotentialImplicitLodashImport, isPotentialInlinedOperator } = tooling

class LscReferencer extends analyze.Referencer {
  LscTildeCallExpression(node) -> {
    this.visitChildren(node)
  }

  LscOptionalTildeCallExpression(node) -> {
    this.visitChildren(node)
  }

  visitImplicitConstDecl(node, patternContainer, iteratee) -> {
    if not patternContainer: return
    this.visitPattern(patternContainer, { processRightHandNodes: true }, (pattern, info) => {
      this.referencingDefaultValue(pattern, info.assignments, null, false);
      if iteratee:
        this.currentScope().__referencing(pattern, Reference.WRITE, iteratee, null, true, true);
      this.currentScope().__define(
        pattern,
        new Definition("Variable", pattern, node, null, null, "const")
      )
    })
  }

  visitEnhancedForIn(node) -> {
    this.scopeManager.__nestForScope(node)
    this.visitImplicitConstDecl(node, node.elem, node.array)
    this.visitImplicitConstDecl(node, node.idx, node.array)
    this.visitImplicitConstDecl(node, node.key, node.object)
    this.visitImplicitConstDecl(node, node.val, node.object)
    if node.array: this.visit(node.array)
    if node.object: this.visit(node.object)
    this.visit(node.body)
    this.close(node)
  }

  // Auto-const for-in and for-of
  visitForIn(node): void -> {
    if node.left.type != "VariableDeclaration":
      this.scopeManager.__nestForScope(node)
      this.visitImplicitConstDecl(node, node.left, node.right)
      this.visit(node.right)
      this.visit(node.body)
      this.close(node)
    else:
      super.visitForIn(node)
  }

  LscForInArrayStatement(node) -> {
    this.visitEnhancedForIn(node)
  }

  LscForInObjectStatement(node) -> {
    this.visitEnhancedForIn(node)
  }

  LscSpreadLoop(node) -> {
    this.visit(node.loop)
  }

  LscNamedArrowDeclaration(node) -> {
    if node.skinny:
      // Basically a FunctionDeclaration
      node.type = "FunctionDeclaration"
      this.visitFunction(node)
      node.type = "LscNamedArrowDeclaration"
    else:
      // Like a const var declaration...
      this.currentScope().__define(
        node.id,
        new Definition("Variable", node.id, node, null, null, "const")
      )
      // ...together with an ArrowFunctionExpression
      node.type = "ArrowFunctionExpression"
      this.visitFunction(node)
      node.type = "LscNamedArrowDeclaration"
  }

  LscNamedArrowExpression(node): void -> {
    if node.skinny:
      node.type = "FunctionExpression"
      this.visitFunction(node)
      node.type = "LscNamedArrowExpression"
    else:
      // XXX: Named fat arrow expression has its name dropped. (unfortunate)
      node.type = "ArrowFunctionExpression"
      this.visitFunction(node)
      node.type = "LscNamedArrowExpression"
  }

  LscNamedArrowMemberExpression(node): void -> {
    this.visit(node.object)
    if node.skinny:
      node.type = "FunctionExpression"
      this.visitFunction(node)
      node.type = "LscNamedArrowMemberExpression"
    else:
      node.type = "ArrowFunctionExpression"
      this.visitFunction(node)
      node.type = "LscNamedArrowMemberExpression"
  }

  LscIfExpression(node) -> {
    this.visitChildren(node)
  }

  LscMatchExpression(node) -> {
    this.visitChildren(node)
  }

  LscMatchStatement(node) -> {
    this.visitChildren(node)
  }

  LscMatchCase(node): void -> {
    if node.outerGuard: this.visit(node.outerGuard)
    if node.atoms: for elem atom in node.atoms: this.visit(atom)

    if node.binding:
      this.scopeManager.__nestBlockScope(node)
      this.visitImplicitConstDecl(node, node.binding, null)

    if node.innerGuard: this.visit(node.innerGuard)
    if node.consequent: this.visit(node.consequent)
    if node.binding: this.close(node)
  }

  LscMatchElse(node) -> {
  }

  LscMatchPlaceholderExpression(node) -> {
  }

  LscPlaceholderExpression(node) -> {
  }

  LscTryExpression(node) -> {
    this.visitChildren(node)
  }

  LscSafeAwaitExpression(node) -> {
    this.visitChildren(node)
  }
}

class LscGlobalScope extends GlobalScope {
  constructor(scopeManager, block) -> {
    super(scopeManager, block)
  }

  __close(scopeManager) -> {
    config = scopeManager._lscCompilerConfig

    if config.lodashEnabled() or config.inlinedOperatorsEnabled():
      newLeft = []
      lodashImports = []
      inlinedOperators = []

      // Unresolved refs to lodash methods will be replaced by implicit
      // imports by the compiler.
      for elem left in this.__left:
        if isPotentialImplicitLodashImport(config, left.identifier.name):
          lodashImports.push(left.identifier)
        elif isPotentialInlinedOperator(config, left.identifier.name):
          inlinedOperators.push(left.identifier)
        else:
          newLeft.push(left)

      this.__left = newLeft
      scopeManager._lscLodashImports = lodashImports
      scopeManager._lscInlinedOperators = inlinedOperators

    super.__close(scopeManager)
  }
}

class LscScopeManager extends ScopeManager {
  constructor(options, compilerConfig) -> {
    super(options)
    this._lscCompilerConfig = compilerConfig
    this._lscLodashImports = []
    this._lscInlinedOperators = []
  }

  __nestGlobalScope(node) -> {
    this.__nestScope(new LscGlobalScope(this, node))
  }
}

export analyzeScope(ast, parserOptions, compilerConfig) ->
  const options = {
    ignoreEval: true,
    optimistic: false,
    directive: false,
    nodejsScope:
      ast.sourceType === "script" &&
      (parserOptions.ecmaFeatures &&
        parserOptions.ecmaFeatures.globalReturn) === true,
    impliedStrict: false,
    sourceType: ast.sourceType,
    ecmaVersion: parserOptions.ecmaVersion || 2018,
    fallback,
    childVisitorKeys
  };

  scopeManager = new LscScopeManager(options, compilerConfig)
  referencer = new LscReferencer(options, scopeManager)

  referencer.visit(ast)

  scopeManager
