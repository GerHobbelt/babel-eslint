import { api } from '@lightscript/babel-preset'
{ isa, getAliasesFor } = api

export getServices(ast, options, scopeManager, compilerConfig) ->
  tailsByNode = scopeManager._tailsByNode
  allTails = scopeManager._tails

  // Services object
  {
    // Allow linting rules to inspect the compiler configuration
    getCompilerConfig() -> compilerConfig
    isLightScript() -> compilerConfig.isLightScript

    // Get a list of implicitly returned nodes from the given function
    getImplicitlyReturnedNodes(node) -> tailsByNode.get(node)

    // Determine if a node is in tail position and therefore used by
    // a LightScript implicit return
    isTailNode(node) -> allTails.get(node)

    // Babel type aliasing
    aliasesFor: getAliasesFor
    isa
  }
