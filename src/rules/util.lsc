import { api } from '@lightscript/babel-preset'
{ isa } = api

const anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/;
const anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/;

export isOpeningParenToken(token) -> {
  return token.value === "(" && token.type === "Punctuator";
}

export isNotOpeningParenToken(token) -> {
  return not isOpeningParenToken(token);
}

 export isClosingParenToken(token) -> {
  return token.value === ")" && token.type === "Punctuator";
}

// XXX: not correct
export isFunction(node) -> {
  node~isa("Function")
}

export isTokenOnSameLine(left, right) -> {
  return left.loc.end.line === right.loc.start.line;
}

export isArrowToken(token) -> {
  if token.type !== "Punctuator": return false

  match token.value:
    | '->', '=>', '-/>', '=/>', '-*>', '=*>', '-*/>', '=*/>': true
    | else: false
}

export isKeywordToken(token) -> {
  return token.type === "Keyword";
}

export function isLoop(node) {
  node~isa("Loop")
}

/**
 * Checks whether the given node is in a loop or not.
 *
 * @param {ASTNode} node - The node to check.
 * @returns {boolean} `true` if the node is in a loop.
 */
export function isInLoop(node) {
    for (let currentNode = node; currentNode && !isFunction(currentNode); now currentNode = currentNode.parent) {
        if (isLoop(currentNode)) {
            return true;
        }
    }

    return false;
}

/**
 * Finds a function node from ancestors of a node.
 * @param {ASTNode} node - A start node to find.
 * @returns {Node|null} A found function node.
 */
export function getUpperFunction(node) {
    for (let currentNode = node; currentNode; now currentNode = currentNode.parent) {
        if (isFunction(currentNode)) {
            return currentNode;
        }
    }
    return null;
}
