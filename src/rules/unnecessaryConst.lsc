isSingleConstDecl(node) ->
  node.type == "VariableDeclaration" and
  node.kind == "const" and
  (not node.extra?.implicit) and
  node.declarations?.length == 1

getShadowedVar(v) ->
  v.scope?.upper?.set.get(v.name)

export default {
  meta: {
    docs: {
      description: "Find unnecessary `const` keywords"
      category: "Stylistic Issues"
    }
    messages: {
      unnecessaryConst: "Unnecessary `const`."
    }
    fixable: true
    schema: []
  }
  create(context) -> {
    if not context.parserServices.isLightScript(): return {}

    {
      VariableDeclaration(node): void -> {
        if node~isSingleConstDecl():
          // Const is necessary if this variable shadows another
          variable = (context.getDeclaredVariables(node))[0]
          shadowing = getShadowedVar(variable)
          if shadowing: return

          sourceCode = context.getSourceCode()
          constToken = sourceCode.getFirstToken(node)
          nextToken = sourceCode.getTokenAfter(constToken)

          context.report({
            node
            loc: constToken.loc
            messageId: 'unnecessaryConst'
            fix(fixer) -> fixer.removeRange([constToken.range[0], nextToken.range[0]])
          })
      }
    }
  } // create
}
